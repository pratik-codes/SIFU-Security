service: solana-detector-lambda

plugins:
  - serverless-add-api-key

  
custom:
  apiKeys:
    - name: lambdaKey

provider:
  name: aws
  stage: dev
  region: us-east-1
  profile: rishi-all-john
  ecr:
    images:
      default:
        path: ./
  apiGateway:
    shouldStartNameWithService: true
    usagePlan:
      quota:
        limit: 30000
        offset: 2
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 10000
  apiKeys:
    - name: ${self:service}-key-${opt:stage, self:provider.stage}

functions:
  detect:
    timeout: 900
    architecture: arm64
    image: 
      name: default
    events:
      - http:
          path: detect
          method: post
          private: true
    provisionedConcurrency: 1 # Set the provisioned concurrency level
    deploymentSettings:
      alias: "provisioned" # Name of the alias
      autoscaling:
        enabled: true
        targetUtilization: 70
        minCapacity: 1
        maxCapacity: 10

# # Define the alias outside of the functions block
# resources:
#   Resources:
#     ProvisionedAlias:
#       Type: AWS::Lambda::Alias
#       Properties:
#         FunctionName: !Ref SnipeLambdaFunction # Use the logical ID of your function
#         FunctionVersion: !GetAtt [SnipeLambdaFunction, Version] # Ensure this points to your function version
#         Name: "provisioned"
#         ProvisionedConcurrencyConfig:
#           ProvisionedConcurrentExecutions: 1